//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Tiles/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""InputOfThePlayer"",
            ""id"": ""4974ceda-e958-4eae-85fc-cfff7e3bd4c9"",
            ""actions"": [
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""d352813d-29ea-4f2b-a3e3-bb8fb0c0350b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""37b89bd2-5620-4342-a0a9-a3e22cc00d1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e70c2f3f-18e5-48e8-a1a7-8ec5d92c95e7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3de693e8-3f61-4399-b94d-ab43c55181f3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputOfThePlayer
        m_InputOfThePlayer = asset.FindActionMap("InputOfThePlayer", throwIfNotFound: true);
        m_InputOfThePlayer_MouseDelta = m_InputOfThePlayer.FindAction("MouseDelta", throwIfNotFound: true);
        m_InputOfThePlayer_LeftClick = m_InputOfThePlayer.FindAction("LeftClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputOfThePlayer
    private readonly InputActionMap m_InputOfThePlayer;
    private List<IInputOfThePlayerActions> m_InputOfThePlayerActionsCallbackInterfaces = new List<IInputOfThePlayerActions>();
    private readonly InputAction m_InputOfThePlayer_MouseDelta;
    private readonly InputAction m_InputOfThePlayer_LeftClick;
    public struct InputOfThePlayerActions
    {
        private @PlayerInput m_Wrapper;
        public InputOfThePlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseDelta => m_Wrapper.m_InputOfThePlayer_MouseDelta;
        public InputAction @LeftClick => m_Wrapper.m_InputOfThePlayer_LeftClick;
        public InputActionMap Get() { return m_Wrapper.m_InputOfThePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputOfThePlayerActions set) { return set.Get(); }
        public void AddCallbacks(IInputOfThePlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_InputOfThePlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputOfThePlayerActionsCallbackInterfaces.Add(instance);
            @MouseDelta.started += instance.OnMouseDelta;
            @MouseDelta.performed += instance.OnMouseDelta;
            @MouseDelta.canceled += instance.OnMouseDelta;
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
        }

        private void UnregisterCallbacks(IInputOfThePlayerActions instance)
        {
            @MouseDelta.started -= instance.OnMouseDelta;
            @MouseDelta.performed -= instance.OnMouseDelta;
            @MouseDelta.canceled -= instance.OnMouseDelta;
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
        }

        public void RemoveCallbacks(IInputOfThePlayerActions instance)
        {
            if (m_Wrapper.m_InputOfThePlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputOfThePlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_InputOfThePlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputOfThePlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputOfThePlayerActions @InputOfThePlayer => new InputOfThePlayerActions(this);
    public interface IInputOfThePlayerActions
    {
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
    }
}
